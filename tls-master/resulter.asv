function [noise_info,res_table,Info_line,x_rec,dst,my_dst,dst_clean,TLS_table] =  resulter (SAR_image_path, Sigma_noise,RandomVariables_lst, Shearlet_decomp_lst, method_name)
    close all
    %T = table({''},[.0],[.0],[.0],{''},[Sigma_noise],[RandomVariables_lst],{'Unkonwn'},'VariableNames',{'ImgName','MSE','PSNR', 'EPI', 'PriorDist','Sigma_noise','RV_lst', 'dependency'} ) 
    %saving_path = "C:\Users\arian\Desktop\ARR\Results_BCGM_Revision2\";
    saving_path = "C:\Users\arian\Desktop\ARR_Grach\Results_other GARCH\"
    %% Shear let part
    Shearlet_toolbox_path = 'C:\Users\arian\Desktop\ARR\shearlet_toolbox_1';
    Stable_path = 'C:\Users\arian\Desktop\ARR\stbl-master';
    Achim_path = 'C:\Users\arian\Desktop\ARR\Achim' ; 
    CauchyD_path = 'C:\Users\arian\Desktop\ARR\CauchyD' ; 
    cs_nsst_path = 'C:\Users\arian\Desktop\ARR\cs_nsst';
    SaS_path = 'C:\Users\arian\Desktop\ARR\SaSDenoising';
    %BM3D_path = 'C:\Users\arian\Desktop\ARR\BM3D\SARBM3D_v10_win64'
    %bifilter_path = 'C:\Users\arian\Desktop\ARR\BiLateralFilter'
    %NLM_path = 'C:\Users\arian\Desktop\ARR\NonLocalFilter'
    Shearlet_folder = genpath(Shearlet_toolbox_path);
    addpath(Shearlet_folder);
    addpath(CauchyD_path);
    %addpath(genpath(cs_nsst_path)) ; 
    addpath (genpath(Stable_path));
    addpath (genpath(SaS_path));
    addpath (genpath(Achim_path));
    %addpath (genpath(BM3D_path));
    %addpath (genpath(bifilter_path));
    %addpath (genpath(NLM_path));
    %SLQdecThreshRec(X,nScales,thresholdingFactors);
    %brb_img =imread('barbara.jpg');
    folder = fileparts(which(Shearlet_toolbox_path));

     %% sample toolbox denoising
    rectang = [200 200 30 30] ;
    % Load image
    switch SAR_image_path
    case 'vie1_0R.jpg'
        star_point_x =48; star_point_y = 10; end_point_x = 80; end_point_y = 137; 
        rectang = [star_point_x star_point_y abs(star_point_x-end_point_x) abs(star_point_y-end_point_y)] ; 
    case 'kit1.jpg'
        star_point_x =386; star_point_y = 176; end_point_x = 447; end_point_y = 252; 
        rectang = [star_point_x star_point_y abs(star_point_x-end_point_x) abs(star_point_y-end_point_y)] ; 
     case 'chi1.jpg'
        star_point_x =38; star_point_y = 406; end_point_x = 111; end_point_y = 485; 
        rectang = [star_point_x star_point_y abs(star_point_x-end_point_x) abs(star_point_y-end_point_y)] ;      
     case 'bellingham19.jpg'
        star_point_x =109; star_point_y = 207; end_point_x = 214; end_point_y = 332; 
        rectang = [star_point_x star_point_y abs(star_point_x-end_point_x) abs(star_point_y-end_point_y)] ; 
        otherwise
    end
    

    
    
    %x=double(imread('boat.png'));

    %x=double(imread('pepper.png'));
    %my_img_sz = 512 %% for synthetic
    my_img_sz = 256
    img_clean=double(imread(SAR_image_path));
    %img_clean=double(rgb2gray(imread(SAR_image_path)));
    img_clean = imresize(img_clean,[my_img_sz my_img_sz]);
    %img_clean=double(rgb2gray(imread('aerial2.png')));
    
    %img_clean = imresize(img_clean,[my_img_sz my_img_sz]);
    %img_clean=double(imread('p07_003.png'));
    %x = imresize(x,[my_img_sz,my_img_sz]);
    %figure()
    %imagesc(log(x))
%      f4 =figure()
%     imshow(uint8(img_clean),[])
    
    %imshow(x)
    % Create noisy image
    if(Sigma_noise == 0)
        disp('original version')
         x =img_clean;
        [L,L] = size(img_clean)
        x_exp = img_clean;
        x_noisy = log(x_exp+1);
        sigma = estimate_unknown_sigma_noise(x_exp+1)+.2;
        %sigma = .2;
    else
        disp('synthetic version')
        x =img_clean;
        [L L]=size(x)

            [L,L] = size(img_clean); 
        mu = 0 ;
        enl =1 ;
        sigma = Sigma_noise ;

        M = exp(mu + .5*sigma^2);
        log_normal_achim = exp(sqrt(2*log(M/enl)).*(sigma.*randn(L,L)) + log(enl));
        x_exp = img_clean .* log_normal_achim ;
        x_noisy = log(x_exp+1); 
         sigma=Sigma_noise;
    end
    
    
     Sigma_n = sigma 
%      if (~isnumeric(Sigma_n))
%         Sigma_n = 0.1 ; 
%      end
     %% LOG VERSION
    %x = log(x+1); 
    %x_noisy=x+sigma.*randn(L,L);
    %figure()
    %imagesc(x_noisy)

    %%%%% WITHOUT LOG
    %x_noisy=x+sigma.*randn(L,L);
    %RVn_lst = [1,2,4]
    RVn_lst = RandomVariables_lst
    %RVn_lst = [1]
    RVn = size(RVn_lst,2);
    gpu_flg = 0 ;
    % setup parameters for shearlet transform
    lpfilt='maxflat';
    % .dcomp(i) indicates there will be 2^dcomp(i) directions 
    decomp = Shearlet_decomp_lst

    shear_parameters.dcomp =decomp;
    % .dsize(i) indicate the local directional filter will be
    % dsize(i) by dsize(i)

    shear_parameters.dsize =[32 32 16 16];
    [dst_clean,shear_f_clean]=nsst_dec1e(log(x+1),shear_parameters,lpfilt);
    [dst,shear_f]=nsst_dec1e(x_noisy,shear_parameters,lpfilt);
%     kptkpt = dst_clean{4}(:,:,1);
%     kptkpt_max = max(kptkpt(:))  
%     kptkpt_min = min(kptkpt(:)) 
    dst_scalars_noise_level = Noise_Estimation(L,shear_f,lpfilt,sigma);
    my_dst{1} = dst{1}; 
    
    img_wiener = wiener2(uint8(exp(x_noisy)),[5 5]); img_wiener_crop = imcrop(img_wiener,rectang) ; 
    img_frost = fcnFrostFilter(uint8(exp(x_noisy))); img_frost_crop = imcrop(img_frost,rectang) ; 
    img_lee = myLee(uint8(exp(x_noisy))) ; 
    img_lee = uint8(img_lee) ; img_lee_crop = imcrop(img_lee,rectang) ; 
    
    img_bifilter = real(exp(double(bif_ed((x_noisy),3,30,.5,.25))));
    img_NLM =real(exp(double(NLmeansfilter(x_noisy,5,2,Sigma_n))));

    
    
    
    
    [dst_lee,shear_f_lee]=nsst_dec1e(log(double(img_lee)+1),shear_parameters,lpfilt);
    
    [dst_frost,shear_f_frost]=nsst_dec1e(log(double(img_frost)+1),shear_parameters,lpfilt);
    
    splited_path = split(string(SAR_image_path),"\") 
    img_name_lst = split(splited_path(end),".") 
    img_name = img_name_lst(1) 
    
        f2=figure(); %img_noisy_crop = imcrop(uint8(exp(x_noisy)),rectang) ; 
    imshow(uint8(exp(x_noisy)))
    title ('Noisy Image')
    
    
        f4 =figure() ; img_clean_crop = imcrop(uint8(img_clean),rectang) ;
    imshow(uint8(img_clean),[]) 
    title ('Clean Image')
    %Image = getframe(gcf);
    Filename = join([img_name,string(method_name),"imgclean"],"_") ;
    Filename = join ([Filename ,string(num2str(size(RandomVariables_lst,2))) ] , "_") ;
    Filename_clean_png = join([Filename, "png"], ".");
    Filename_clean_eps = join([Filename, "eps"], ".");
    Filename_clean_fig = join([Filename, "fig"], ".");
    %imwrite(Image.cdata, join([saving_path, Filename,size(RandomVariables_lst,2), ".png"],"") );
    saveas(f4,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename_clean_png)));
    saveas(f4,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename_clean_eps)));
    saveas(f4,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename_clean_fig)));
    
 
        
%     f_bifilter = figure() ;
%     imshow(uint8(img_bifilter),[]);
%     title ('Filtered by ATS-RBF')
%     Filename = join([img_name,string(method_name),"AtsRbf"],"_") ;
%     saveas(f_bifilter,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'AtsRbf.png']));
%     saveas(f_bifilter,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'AtsRbf.eps']));
%     saveas(f_bifilter,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'AtsRbf.fig']));
%     
%     

%     f_NLM = figure() ;
%     imshow(uint8(img_NLM),[]);
%     title ('Filtered by NLM')    
%     Filename = join([img_name,string(method_name),"NLM"],"_") ;
%     saveas(f_NLM,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'NLM.png']));
%     saveas(f_NLM,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'NLM.eps']));
%     saveas(f_NLM,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'NLM.fig']));    
%     
    
%     f_wiener = figure() ;
%     imshow(img_wiener,[]);
%     title('Filtered by Wiener');
%     saveas(f_wiener,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'Wiener.png']));
%     saveas(f_wiener,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'Wiener.eps']));
%     saveas(f_wiener,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'Wiener.fig']));
%     
%     f_frost = figure() ;
%     imshow(img_frost,[]);
%     title('Filtered by Frost');
%     saveas(f_frost,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'Frost.png']));
%     saveas(f_frost,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'Frost.eps']));
%     saveas(f_frost,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'Frost.fig']));
%     
%     f_lee = figure() ;
%     imshow(img_lee,[]);
%     title('Filtered by Lee');
%     saveas(f_lee,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'Lee.png']));
%     saveas(f_lee,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'Lee.eps']));
%     saveas(f_lee,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'Lee.fig']));
%     
    
    niter = 100;
    lambda = 0.05;
    rect = [round(size(x_noisy,2)/15) round(size(x_noisy,2)/15)...
    round(size(x_noisy,2)/15) round(size(x_noisy,1)/15)];
    %rect = [10 15 40 40];
    %[img_log_SRAD,rctt] = SRAD(uint8(exp(x_noisy)),niter,lambda,rect); 
    %[img_log_SRAD,rctt] = SRAD2(uint8(x_noisy),125,0.025);
    %img_SRAD = uint8(round(img_log_SRAD.*255)); img_SRAD_crop = imcrop(img_SRAD,rectang) ;
    %img_SRAD = uint8(rctt);
%     f_SRAD = figure() ;
%     imshow(img_SRAD,[]);
%     title('Filtered by SRAD');
%     saveas(f_SRAD,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'SRAD.png']));
%     saveas(f_SRAD,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'SRAD.eps']));
%     saveas(f_SRAD,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'SRAD.fig']));
%  
    
    %img_SRAD = uint8(round(img_log_SRAD.*255));
    %img_BM3D = SARBM3D_v10(exp(x_noisy),1);
%     img_BM3D = SARBM3D_v10(double(img_lee),1); img_BM3D_crop = imcrop(img_BM3D,rectang) ; 
%     %img_SRAD = uint8(rctt);
%     f_BM3D = figure() ;
%     imshow(img_BM3D,[]);
%     title('Filtered by BM3D');
%     saveas(f_BM3D,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'BM3D.png']));
%     saveas(f_BM3D,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'BM3D.eps']));
%     saveas(f_BM3D,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(img_name),'BM3D.fig']));
%     
%     img_bifilter_crop = img_BM3D_crop%imcrop(img_bifilter,rectang) ;
%     img_NLM_crop = img_BM3D_crop%imcrop(img_NLM,rectang) ;
%     
%     
%     MSE_Wiener = immse(img_wiener,  uint8(img_clean))
%     MSE_Frost = immse(img_frost,  uint8(img_clean)) 
%     MSE_Lee = immse(uint8(img_lee),  uint8(img_clean)) 
%     MSE_SRAD = immse(uint8(img_SRAD),  uint8(img_clean)) 
%     MSE_BM3D = immse(uint8(img_BM3D),  uint8(img_clean)) 
%     MSE_bifilter = immse(uint8(img_bifilter),  uint8(img_clean)) 
%     MSE_NLM = immse(uint8(img_NLM),  uint8(img_clean)) 
%     
    ENL = @(imgg) mean(double(imgg(:)))^2/var(double(imgg(:))) ; 
%     
%     line_wiener = {splited_path(end),round(MSE_Wiener,3), round(psnr(img_wiener,uint8(img_clean)),3),...
%         round(ssim(img_wiener,uint8(img_clean)),3), round(epi(double(img_wiener),(img_clean)),3),ENL(img_wiener_crop),'Wiener',Sigma_noise,[[nan nan nan]] , "X" } ;
%     line_Frost = {splited_path(end),round(MSE_Frost,3), round(psnr(img_frost,uint8(img_clean)),3),...
%         round(ssim(img_frost,uint8(img_clean)),3), round(epi(double(img_frost),(img_clean)),3),ENL(img_frost_crop),'Frost',Sigma_noise,[[nan nan nan]] , "X" } ;
%     line_Lee = {splited_path(end),round(MSE_Lee,3), round(psnr(img_lee,uint8(img_clean)),3),...
%         round(ssim(img_lee,uint8(img_clean)),3), round(epi(double(img_lee),(img_clean)),3),ENL(img_lee_crop),'Lee',Sigma_noise,[[nan nan nan]] , "X" } ;
%     
%     line_SRAD = {splited_path(end),round(MSE_SRAD,3), round(psnr(img_SRAD,uint8(img_clean)),3),...
%         round(ssim(img_SRAD,uint8(img_clean)),3), round(epi(double(img_SRAD),(img_clean)),3),ENL(img_SRAD_crop),'SRAD',Sigma_noise,[[nan nan nan]] , "X" } ;    
%     
%     line_BM3D = {splited_path(end),round(MSE_BM3D,3), round(psnr(img_BM3D,(img_clean)),3),...
%         round(ssim(uint8(img_BM3D),uint8(img_clean)),3), round(epi(double(img_BM3D),(img_clean)),3),ENL(img_BM3D_crop),'BM3D',Sigma_noise,[[nan nan nan]] , "X" }  
%     
%     line_NLM = {splited_path(end),round(MSE_NLM,3), round(psnr(img_NLM,(img_clean)),3),...
%         round(ssim(real(img_NLM),(img_clean)),3), round(epi(real(img_NLM),(img_clean)),3),ENL(img_NLM_crop),'NLM',Sigma_noise,[[nan nan nan]] , "X" }  
%     line_bifilter = {splited_path(end),round(MSE_bifilter,3), round(psnr(img_bifilter,(img_clean)),3),...
%         round(ssim(img_bifilter,(img_clean)),3), round(epi(double(img_bifilter),(img_clean)),3),ENL(img_bifilter_crop),'bifilter',Sigma_noise,[[nan nan nan]] , "X" }  
    
    MSE_clean_noisy = immse(uint8(exp(x_noisy)),  uint8(img_clean)) ;
    img_noisy_crop = imcrop(uint8(exp(x_noisy)),rectang) ;
    NoiseInfo_table = table({'Noisy IMG'},[MSE_clean_noisy ],[psnr(uint8(exp(x_noisy)),uint8(img_clean))],[ssim(uint8(exp(x_noisy)),uint8(img_clean))],[epi(uint8(exp(x_noisy)),uint8(img_clean))],ENL(img_noisy_crop),{''},[Sigma_noise],[nan nan nan],{'Unkonwn'},...
        'VariableNames',{'ImgName','MSE','PSNR','SSIM', 'EPI','ENL', 'PriorDist','Sigma_noise','RV_lst', 'dependency'} ) ;
    NoiseInfo_table = [NoiseInfo_table ;line_wiener ;line_Frost; line_Lee; line_SRAD;line_BM3D] ;
    
    TLS_statistics_table = table ([.0],[.0],[.0],{''},[.0],{''},[.0],{''},[.0],[.0],[.0],'VariableNames',{'Scale', 'Direction', 'mu_tls','mu_ConfInterval' , 'sigma_tls','sigma_ConfInterval' , 'nu_tls','nu_ConfInterval', 'Pvalue', 'stat_test_res', 'sigma_n'}) ;
    line_TLS_statistics = {0,0,0,'',0,'',0,'',0,0,0};
    
    for i = 1:length(decomp) 
        for j = 1:2^decomp(i)
            level = i+1 ;
            dir = j;
            Sigma_n = dst_scalars_noise_level{level}(dir)

            XX_scale_level_mtb = creat_X_dataset(dst, level, dir, 3);
            XX_scale_level_mtb_clean = creat_X_dataset(dst_clean, level, dir, 3);
            XX_scale_level_Lee = creat_X_dataset(dst_lee, level, dir, 3);
            XX_scale_level_frost = creat_X_dataset(dst_frost, level, dir, 3);
            coeff = dst{level}(:,:,dir);
            %xmin = min ( XX_scale_level_mtb(1,:));
            %xmax = max (  XX_scale_level_mtb(1,:));
            xmin = min(coeff(:))
            xmax = max(coeff(:))
            %xmax = abs(xmax)
            integral_bins =10;
            XX = XX_scale_level_mtb(RVn_lst, :);
            fea = XX_scale_level_mtb(RVn_lst, 1:20:end)';
            XX_clean = XX_scale_level_mtb_clean(RVn_lst, :);
            fea_clean = XX_scale_level_mtb_clean(RVn_lst, 1:20:end)';
            fea_Lee = XX_scale_level_Lee(RVn_lst, 1:20:end)';
            fea_frost = XX_scale_level_frost(RVn_lst, 1:20:end)';
            %fea = XX_scale_level_mtb_clean(RVn_lst, 1:20:end)'; 
            %Sigma_copula = copulafit('Gaussian',  )
            %x = XX(1,1:20:end)';
            %y = XX(2,1:20:end)';
            %fea1 = XX_clean(1,1:20:end)';
            %fea2 = XX_clean(2,1:20:end)';
            %z = XX(3,1:20:end)'; 
            %scatterhist(x,y)
            %u = ksdensity(x,x,'function', 'cdf');
            %v = ksdensity(y,y,'function', 'cdf');
            %u = ksdensity(fea1,fea1,'function', 'cdf');
            %v = ksdensity(fea2,fea2,'function', 'cdf');
            %k = ksdensity(z,z,'function', 'cdf');
            %scatterhist(u,v)
            %R= corrcoef(u,v)
            %Sigma_copula = copulafit('Gaussian', [u,v])
            %Sigma_copula = copula_estimator (fea_clean) ;
            %Sigma_copula = copula_estimator (fea) ;
            %Sigma_copula = Sigma_copula - Sigma_n^2 .* eye(RVn) ;
            
            Sigma_copula = cov(fea) - Sigma_n^2 .* eye(RVn) ; 
            [V,D] = eig(Sigma_copula) ; 
            D(D<0) = 0.01 ;  Sigma_copula_cov = V*D*V' ;  Sigma_copula = corrcov(Sigma_copula_cov);
            MV_RND = mvnrnd(zeros(1,RVn) , Sigma_copula_cov, 1000) ;
            Sigma_copula_hyper_cube = copula_estimator (MV_RND)
            %Sigma_copula = copula_estimator (fea_Lee)
            
%             if(i == length(decomp))
%                 Monte_corr =  cov(fea) - Sigma_n^2 .* eye(RVn)
%                 %Monte_corr = corrcov(Monte_corr) 
%                 Sigma_copula = Monte_corr ; 
%                 Sigma_copula = corrcov(Sigma_copula)
%             end
            %Monte_X = mvnrnd(zeros(1,RVn) , Monte_corr, 1000) ;
            %sz_monte_X = size(Monte_X) ;
            pd_std_n = makedist('Normal', 'mu', 0 , 'sigma', 1); 
            %G_Monte = cdf(pd_std_n,Monte_X) ; 
            %sz_G_monte = size(G_Monte) ;
            %Sigma_copula = G_Monte'*G_Monte/1000 ;
            %Sigma_copula = copulafit('Gaussian', [u,v,k])
            %Sigma_copula = [1]
            %Sigma_copula = eye(RVn) % independent !

            %% BCGM
            if (strcmp(method_name, 'BCGM'))
                
                
                
                p = stblfit(fea(:,1))

                
                %% noisy version
                [alpha,scale] = SaSGfit_manual(fea(:,1),Sigma_n);
                scale = SaSGecfMomFit(fea(:,1),[1:50],alpha,Sigma_n);
                scale = abs(scale)
                 alpha = p(1);
%                 scale = p(3) ; 
                eps = (4-alpha^2) / (3*alpha^2)
                %Sigma_copula = corrcov((1-eps)^2 .* Sigma_copula);
                %Z = mvnrnd(zeros(1,RVn),Monte_corr,1000);
                %corr_coef_Z  = corrcoef(Z)
                %U = normcdf(Z);
                %U_corr = corrcoef(U)
                %rho = copulaparam('Gaussian',corr(MV_RND))
%                 figure ;
%                 %p_mle = mle(fea(:,1),'distribution','Stable')
%                 %pp_stbl = @(data,alpha,beta,gamma,delta)cdf('Stable',data,alpha,beta,gamma,delta);
%                 %p_mle = mle(fea(:,1),'distribution','tLocationScale');
%                 %t = @(data,mu,sig,df)cdf('tLocationScale',data,mu,sig,df);
%                 %h = probplot(gca,pp_stbl,p_mle);
%                 pd_stbl = makedist('Stable','alpha',alpha,'beta',0, 'gam',p(3) , 'delta',0 );
%                 title('{\bf Stable QQ plot}')
%                 qqplot(fea(:,1),pd_stbl );
%                 figure 
%                 title('{\bf Normal QQ plot}')
%                 qqplot(fea(:,1) );
                %probplot(fea(:,1));
%                 h.Color = 'r';
%                 h.LineStyle = '-';
%                 title('{\bf Probability Plot}')
%                 legend('Normal','Data','t','Location','NW')
                
                
                
                if (size(Sigma_copula_hyper_cube,1)==1)
                    Sigma_copula = [1];
                else
                    U = copularnd('gaussian',Sigma_copula_hyper_cube,1000);
                    %Monte_X = eps.*cauchyinv(U, 0, scale) + (1-eps).* norminv(U,0,scale);
                    %Monte_X_corr = corrcoef(Monte_X)
                    G_Monte = icdf(pd_std_n,U) ; 
                    Sigma_copula = G_Monte'*G_Monte/1000  
                end
                
                JointPrior = Copula_multivariate(BCGM_pdf(eps,scale),Sigma_copula,RVn);
               
                
                %% plotting BCGM
%                 figure()
%                 fh = fplot(BCGM_pdf(eps,scale));
%                 fh.LineWidth = 2 ;
%                 hold on
%                 [ff,xx]=hist(fea(:,1),50);
%                 plot(xx,ff/trapz(xx,ff),'*')
%                 hold off
            end
            %% TLS
            if (strcmp(method_name , 'TLS'))
                pd = fitdist(fea_Lee(:,1),'tLocationScale');
                %pd = fitdist(fea_frost(:,1),'tLocationScale');
                %pd = fitdist(fea(:,1),'tLocationScale');
                mu_tls = pd.mu 
                sigma_tls = pd.sigma  
                nu_tls = pd.nu 
                JointPrior = Copula_multivariate2(tls(pd.mu,pd.sigma,pd.nu),Sigma_copula,RVn) ;
                params_tls = paramci(pd) ;
                params_tls = params_tls' ;
                
                line_TLS_statistics = {level,dir,round(pd.mu,3),mat2str(params_tls(1,:),3),...
                    round(pd.sigma,3),mat2str(params_tls(2,:),3),...
                    round(pd.nu,3),mat2str(params_tls(3,:),3),0.0,0.0,round(Sigma_n,4)};
                %% plotting TLS
%                 figure()
%                 fh = fplot(tls(pd.mu,pd.sigma,pd.nu));
%                 fh.LineWidth = 3 ;
%                 hold on
%                 [ff,xx]=hist(fea_Lee(:,1),1000, 'LineWidth' , 2);
%                 plot(xx,ff/trapz(xx,ff))
%                 hold on
%                 pd_normal = makedist('Normal','mu', 0,  'sigma' , pd.sigma+.2) ;
%                 pdf_normal = pdf(pd_normal,-1:.01:1);
%                 plot(-1:.01:1,pdf_normal,'LineWidth',1, 'color','g') ; 
%                 pd_TS = makedist('tLocationScale','mu', 0,  'sigma' , 1,'nu',pd.nu) ;
%                 pdf_TS = pdf(pd_TS,-3:.1:3);
%                 plot(-3:.1:3,pdf_TS,'LineWidth',1)
%                 legend(['t-loc-scale $\hat{\nu} = $' ,num2str(pd.nu) , '$ \hat{\sigma} = $' , num2str(pd.sigma)],...
%                     'Emprical PDF' , 'Normal'...
%                     ,['t student $\hat{\nu} = $' ,num2str(pd.nu)],'interpreter', 'latex');
            end
            if (strcmp(method_name , 'NIG'))
                %pd = fitdist(fea(:,1),'tLocationScale');
                [ alpha,delta ] = nig_fit_moment( fea(:,1),Sigma_n^2 )
                JointPrior = Copula_multivariate(NIG_pdf ( alpha+.01, 0, delta+.01, 0),Sigma_copula,RVn);
                %% plotting NIG
%                 figure()
%                 fh = fplot(NIG_pdf ( alpha, 0, delta, 0));
%                 fh.LineWidth = 2 ;
%                 hold on
%                 [ff,xx]=hist(fea(:,1),50);
%                 plot(xx,ff/trapz(xx,ff),'*')
%                 hold off
            end
    %         Joint = matlabFunction (JointPrior)
            %Joint(1,2,3)
            %cdf = int (matlabFunction( simplify(tls(pd.mu,pd.sigma,pd.nu))),-inf,sym('x1'))

            %denoised_sacale_level = scale_level_denoising(XX_scale_level_mtb,RVn_lst,JointPrior, Sigma_n,L,gpu_flg);
            denoised_sacale_level = scale_level_conv_denoising(XX_scale_level_mtb, RVn_lst,JointPrior, Sigma_n,xmin,xmax,integral_bins ,L,gpu_flg);



            %denoised_sacale_level = scale_level_conv_denoising_edited(XX_scale_level_mtb,dst{level}(:,:,dir), RVn_lst,JointPrior, Sigma_n,xmin,xmax,integral_bins ,L,gpu_flg);
            %denoised_sacale_level = scale_level_conv_denoising_edited_causal(XX_scale_level_mtb, RVn_lst,JointPrior, Sigma_n,xmin,xmax,integral_bins ,L,gpu_flg);
            %dst{level}(:,:,dir) = denoised_sacale_level ;
            my_dst{level}(:,:,dir) = denoised_sacale_level ;
            noisy_scale_dir= dst{level}(:,:,dir);
            clean_scale_dir = dst_clean {level}(:,:,dir) ; 
            [h,p] = ttest(clean_scale_dir(:),noisy_scale_dir(:));
            %[h,p] = ttest(denoised_sacale_level(:),noisy_scale_dir(:));
            line_TLS_statistics{end-2} = p; line_TLS_statistics{end-1} = h;
            TLS_statistics_table = [TLS_statistics_table ; line_TLS_statistics];
            %figure()
            %imagesc(denoised_sacale_level)
        end
    end
    splited_path = split(string(SAR_image_path),"\") 
    img_name_lst = split(splited_path(end),".") 
    img_name = img_name_lst(1) 
    iif = @(varargin) varargin{2 * find([varargin{1:2:end}], 1, 'first')}();
    dependency_check = @(x) iif( x==1, @() 'indep', x>1, 'dep',x==0, 'estimator+Lee' );
    RV2table = @(x) iif( size(x,2)==1, @() [x nan nan], size(x,2)==2, [x nan], size(x,2)==3,x  );
    
    %xr=nsst_rec1(dst,lpfilt)
    xr=nsst_rec1(my_dst,lpfilt);
    
    
    
    img_lee_xr = myLee(uint8(exp(xr))) ; 
    img_lee_xr = uint8(img_lee_xr) ; img_lee_xr_crop = imcrop(img_lee_xr,rectang) ;
    %imshow(exp(xr))
    f1 =figure()

    imshow(uint8(exp(xr)),[])  ; xr_crop = imcrop(uint8(exp(xr)),rectang) ;
    title('Proposed Method')
    %Image = getframe(gcf);
    Filename = join([img_name,string(method_name),string(dependency_check(size(RandomVariables_lst,2))),"xr"],"_") ;
    Filename2 = join ([Filename ,string(num2str(size(RandomVariables_lst,2))),strjoin(string(RandomVariables_lst),"") ] , "_") ;
    
    Filename = join([Filename2, "png"], ".");
    Filename_eps = join([Filename2, "eps"], ".");
    Filename_fig = join([Filename2, "fig"], ".");
    %imwrite(Image.cdata, join([saving_path, Filename,size(RandomVariables_lst,2), ".png"],"") );
    saveas(f1,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename)));
    saveas(f1,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename_eps)));
    saveas(f1,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename_fig)));
%     f2=figure()
% 
%     imshow(uint8(exp(x_noisy)),[])
%     title ('uint8 x noisy')
%     
%     
%     %Image = getframe(gcf);
    f2=figure();
    imshow(uint8(exp(x_noisy)))
    title('Noisy Image')
    Filename = join([img_name,string(method_name),string(dependency_check(size(RandomVariables_lst,2))),"xnoisy"],"_") ;
    Filename = join ([Filename ,string(num2str(size(RandomVariables_lst,2))) ] , "_") ;
    
    Filename_png = join([Filename, "png"], ".");
    Filename_eps = join([Filename, "eps"], ".");
    Filename_fig = join([Filename, "fig"], ".");
    %imwrite(Image.cdata, join([saving_path, Filename,size(RandomVariables_lst,2), ".png"],"") );
    saveas(f2,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename_png)));
    saveas(f2,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename_eps)));
    saveas(f2,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename_fig)));
    
%     f3=figure()
% 
%     imagesc(xr)
%     title ('log(xr) reconstructed')
%     
%     %    Image = getframe(gcf);
%     Filename = join([img_name,string(method_name),string(dependency_check(size(RandomVariables_lst,2))),"logxr"],"_") ;
%     Filename = join ([Filename ,string(num2str(size(RandomVariables_lst,2))) ] , "_") ;
%     Filename = join([Filename, "png"], ".");
%     %imwrite(Image.cdata, join([saving_path, Filename,size(RandomVariables_lst,2), ".png"],"") );
%     saveas(f3,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename)));
    
    
%     figure()
% 
%     imagesc(x_noisy)
%     title ('x noisy')

%     f4 =figure()
%     imshow(uint8(img_clean),[])
%     title ('image clean')
%     %Image = getframe(gcf);
%     Filename = join([img_name,string(method_name),string(dependency_check(size(RandomVariables_lst,2))),"imgclean"],"_") ;
%     Filename = join ([Filename ,string(num2str(size(RandomVariables_lst,2))) ] , "_") ;
%     Filename = join([Filename, "png"], ".");
%     %imwrite(Image.cdata, join([saving_path, Filename,size(RandomVariables_lst,2), ".png"],"") );
%     saveas(f4,fullfile(convertStringsToChars(saving_path),convertStringsToChars(Filename)));

%     f_lee_xr = figure() ;
%     imshow(img_lee_xr,[]);
%     title('Filtered by Lee');
%     saveas(f_lee_xr,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrLee.png']));
%     saveas(f_lee_xr,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrLee.eps']));
%     saveas(f_lee_xr,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrLee.fig']));
%     
    
    
    RVn_lst;

    MSE_clean_denoisaed = immse(uint8(exp(xr)),  uint8(img_clean)) 
    MSE_noisy_denoised = immse(uint8(exp(xr)),  uint8(exp(x_noisy))) 
     
%     [xr_exp_ST,dst_ST,dst_new_ST] = soft_treshold(x_exp,Sigma_n) ; xr_exp_ST_crop = imcrop(xr_exp_ST,rectang) ;
%     [xr_exp_HT,dst_HT,dst_new_HT] = hard_treshold(x_exp,Sigma_n) ; xr_exp_HT_crop = imcrop(xr_exp_HT,rectang) ;
%     
%     
%     f_ST = figure
%     imshow(uint8(xr_exp_ST),[]);
%     title('Soft Treshold');
%     saveas(f_ST,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrST.png']));
%     saveas(f_ST,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrST.eps']));
%     saveas(f_ST,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrST.fig']));
%     f_HT = figure
%     imshow(uint8(xr_exp_HT),[]);
%     title('Hard Treshold');
%     saveas(f_HT,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrHT.png']));
%     saveas(f_HT,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrHT.eps']));
%     saveas(f_HT,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrHT.fig']));
%     
    digits = 3 ;
    MSE_clean_denoisaed = round(MSE_clean_denoisaed,digits) ;
    psnr_clean_denoised = round(psnr(uint8(exp(xr)),uint8(img_clean)),digits);
    ssim_clean_denoised = round(ssim(uint8(exp(xr)),uint8(img_clean)),digits) ;
    epi_clean_denoised = round(epi((exp(xr)),(img_clean)),digits) ; 
    line = {splited_path(end),MSE_clean_denoisaed,...
        psnr_clean_denoised,...
        ssim_clean_denoised,...
        epi_clean_denoised ,ENL(xr_crop),...
        method_name,Sigma_noise,...
        [RV2table(RandomVariables_lst)] ,...
        dependency_check(size(RandomVariables_lst,2)) } ;
    
%     MSE_clean_lee = round(immse(uint8(img_lee_xr),  uint8(img_clean)),digits) ;
%     psnr_clean_lee = round(psnr(uint8(img_lee_xr),uint8(img_clean)),digits);
%     ssim_clean_lee = round(ssim(uint8(img_lee_xr),uint8(img_clean)),digits) ;
%     epi_clean_lee = round(epi(double(img_lee_xr),(img_clean)),digits) ; 
%     
%     line_lee_xr = {splited_path(end),MSE_clean_lee,...
%         psnr_clean_lee,...
%         ssim_clean_lee,...
%         epi_clean_lee,ENL(img_lee_xr_crop),...
%         method_name,Sigma_noise,...
%         [RV2table(RandomVariables_lst)] ,...
%         dependency_check(0) } 
    RV2table(RandomVariables_lst)
    %NoiseInfo_table = [NoiseInfo_table;line] ;
%     MSE_clean_ST = round(immse(uint8(xr_exp_ST),  uint8(img_clean)),digits) ;
%     psnr_clean_ST = round(psnr(uint8(xr_exp_ST),uint8(img_clean)),digits);
%     ssim_clean_ST = round(ssim(uint8(xr_exp_ST),uint8(img_clean)),digits) ;
%     epi_clean_ST = round(epi(xr_exp_ST,(img_clean)),digits) ;     
%     
    line_ST = {splited_path(end),MSE_clean_ST,...
        psnr_clean_ST,...
        ssim_clean_ST,...
        epi_clean_ST,ENL(xr_exp_ST_crop),...
        'SoftT',Sigma_noise,...
        [RV2table(RandomVariables_lst)] ,...
        dependency_check(size(RandomVariables_lst,2)) } ;    
    
    MSE_clean_HT = round(immse(uint8(xr_exp_HT),  uint8(img_clean)),digits) ;
    psnr_clean_HT = round(psnr(uint8(xr_exp_HT),uint8(img_clean)),digits);
    ssim_clean_HT = round(ssim(uint8(xr_exp_HT),uint8(img_clean)),digits) ;
    epi_clean_HT = round(epi(xr_exp_HT,(img_clean)),digits) ;   
    
    
    line_HT = {splited_path(end),MSE_clean_HT,...
        psnr_clean_HT,...
        ssim_clean_HT,...
        epi_clean_HT,ENL(xr_exp_HT_crop),...
        'HardT',Sigma_noise,...
        [RV2table(RandomVariables_lst)] ,...
        dependency_check(size(RandomVariables_lst,2)) } ;      
    
    Yuan_img = Yuan(x_exp,Sigma_noise) ; Yuan_img_crop = imcrop(Yuan_img,rectang) ;
    
    f_Yuan = figure
    imshow(uint8(Yuan_img),[]); 
    title('Yuan');
    saveas(f_Yuan,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrYuan.png']));
    saveas(f_Yuan,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrYuan.eps']));
    saveas(f_Yuan,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrYuan.fig']));
    %saveas(f_Yuan,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrYuan.png']));
    
    MSE_clean_Yuan = round(immse(uint8(Yuan_img),  uint8(img_clean)),digits) ;
    psnr_clean_Yuan = round(psnr(uint8(Yuan_img),uint8(img_clean)),digits);
    ssim_clean_Yuan = round(ssim(uint8(Yuan_img),uint8(img_clean)),digits) ;
    epi_clean_Yuan = round(epi(Yuan_img,(img_clean)),digits) ;   
    
    line_Yuan = {splited_path(end),MSE_clean_Yuan,...
        psnr_clean_Yuan,...
        ssim_clean_Yuan,...
        epi_clean_Yuan,ENL(Yuan_img_crop),...
        'Yuan',Sigma_noise,...
        [RV2table(RandomVariables_lst)] ,...
        dependency_check(size(RandomVariables_lst,2)) } ;  
    
   Liu_img = cs_nsst(x_exp);
    Liu_img = uint8(Liu_img)  ;
    %Liu_img = imhistmatchn(Liu_img, uint8(Yuan_img))
    f_Liu = figure
    imshow(uint8(Liu_img),[]);  Liu_img_crop = imcrop(Liu_img,rectang) ;
    title('CsNsst');
    saveas(f_Liu,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrLiu.png']));
    saveas(f_Liu,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrLiu.eps']));
    saveas(f_Liu,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrLiu.fig']));
    %saveas(f_Yuan,fullfile(convertStringsToChars(saving_path),[convertStringsToChars(Filename2),'xrYuan.png']));
    
    MSE_clean_Liu = round(immse(uint8(Liu_img),  uint8(img_clean)),digits) ;
    psnr_clean_Liu = round(psnr(uint8(Liu_img),uint8(img_clean)),digits);
    ssim_clean_Liu = round(ssim(uint8(Liu_img),uint8(img_clean)),digits) ;
    epi_clean_Liu = round(epi(double(Liu_img),(img_clean)),digits) ;     
    
    line_Liu = {splited_path(end),MSE_clean_Liu,...
        psnr_clean_Liu,...
        ssim_clean_Liu,...
        epi_clean_Liu,ENL(double(Liu_img_crop)),...
        'CsNsst',Sigma_noise,...
        [RV2table(RandomVariables_lst)] ,...
        dependency_check(size(RandomVariables_lst,2)) } ;    
    
    
    %plot_io_shearlet_coeffs(dst ,my_dst ,'vie1','C:\Users\Arian\GitBackupThesis\thesis\sample\ThesisCode\Results\io')
    
    noise_info = NoiseInfo_table ;
    res_table=  [NoiseInfo_table;line;line_lee_xr ; line_HT ; line_ST;line_Yuan;line_Liu;line_bifilter;line_NLM] ;
    Info_line = [line;line_lee_xr] ;
    TLS_table = TLS_statistics_table ; 
    x_rec = exp(xr - Sigma_noise^2/2) ; 
end